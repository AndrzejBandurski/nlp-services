commands:
  build_and_test_service:
    description: "Build and test service"
    parameters:
      service_name:
        type: string
        default: ""
      org:
        type: string
        default: ""
      docker_org:
        type: string
        default: ""
      run_test:
        type: boolean
        default: true
      unit_test_command:
        type: string
        default: ""
    steps:
      - run:
          name: Container setup
          command: |
            pyenv global 3.6.5
            pip install --upgrade pip
            pip install requests tqdm
            sudo mkdir -p << parameters.service_name >>/caches/models
            sudo chown -R circleci:circleci << parameters.service_name >>
      - restore_cache:
          keys:
            - service-cache-v1-{{ .Branch }}-{{ checksum "<< parameters.service_name >>/Dockerfile" }}
            - service-cache-v1-{{ .Branch }}-
            - service-cache-v1-
      - run:
          name: Fetch models
          command: |
            cd << parameters.service_name >>
            python ../fetch_models.py
      - run:
          name: Load docker image cache.
          command: |
            docker load -i << parameters.service_name >>/caches/docker_image.tar || true
      - run:
          name: Build application Docker image
          command: |
            cd << parameters.service_name >>
            export DOCKER_DEPLOY=$([ "${CIRCLE_PROJECT_USERNAME}" = "singnet" ] && echo "true" || echo "false")
            if [ "$DOCKER_DEPLOY" = "true" ]; then
            	echo "PRODUCTION DEPLOYMENT"
            	docker build --cache-from=<< parameters.docker_org >>/<< parameters.service_name >>:latest -t << parameters.docker_org >>/<< parameters.service_name >>:latest --build-arg GITHUB_ACCOUNT=${CIRCLE_PROJECT_USERNAME} .
            else
            	echo "DEVELOPMENT DEPLOYMENT"
            	docker build --cache-from=$DEV_DOCKER_ORG/<< parameters.service_name >>:latest -t $DEV_DOCKER_ORG/<< parameters.service_name >>:latest --build-arg GITHUB_ACCOUNT=${CIRCLE_PROJECT_USERNAME} .
            fi
      - when:
          condition: << parameters.run_test >>
          steps:
            - run:
                name: Run tests
                command: |
                  export DOCKER_DEPLOY=$([ "${CIRCLE_PROJECT_USERNAME}" = "singnet" ] && echo "true" || echo "false")
                  if [ "$DOCKER_DEPLOY" = "true" ]; then
                      echo "PRODUCTION DEPLOYMENT"
                      docker run --name << parameters.service_name >> -idt << parameters.docker_org >>/<< parameters.service_name >>:latest
                  else
                  	echo "DEVELOPMENT DEPLOYMENT"
                      cd << parameters.service_name >>/tests/
                      docker run --name << parameters.service_name >> -idt $DEV_DOCKER_ORG/<< parameters.service_name >>:latest
                  fi
                  docker exec -it << parameters.service_name >> /bin/bash -c << parameters.unit_test_command >>
      - run:
          name: Save docker image
          no_output_timeout: 40m
          command: |
            pwd
            mkdir -p << parameters.service_name >>/caches
            export DOCKER_DEPLOY=$([ "${CIRCLE_PROJECT_USERNAME}" = "singnet" ] && echo "true" || echo "false")
            if [ "$DOCKER_DEPLOY" = "true" ]; then
                echo "PRODUCTION DEPLOYMENT"
                docker save -o << parameters.service_name >>/caches/docker_image.tar << parameters.docker_org >>/<< parameters.service_name >>:latest
                ls -sh << parameters.service_name >>/caches
            else
            	echo "DEVELOPMENT DEPLOYMENT"
                docker save -o << parameters.service_name >>/caches/docker_image.tar $DEV_DOCKER_ORG/<< parameters.service_name >>:latest
                ls -sh << parameters.service_name >>/caches
            fi
      - save_cache:
          key: service-cache-v1-{{ .Branch }}-{{ checksum "<< parameters.service_name >>/Dockerfile" }}
          paths:
            - << parameters.service_name >>/caches/docker_image.tar
            - << parameters.service_name >>/caches/models

  deploy_service:
    description: "Deploy service"
    parameters:
      service_name:
        type: string
        default: ""
      org:
        type: string
        default: ""
      docker_org:
        type: string
        default: ""
      container_name_backup:
        type: string
        default: ""
      snetd_port:
        type: integer
        default: 0
    steps:
      - run:
          name: Load docker image cache.
          command: |
            docker load -i << parameters.service_name >>/caches/docker_image.tar
      - run:
          name: Deploy docker image
          command: |
            export DOCKER_DEPLOY=$([ "${CIRCLE_PROJECT_USERNAME}" = "singnet" ] && echo "true" || echo "false")
            if [ "$DOCKER_DEPLOY" = "true" ]; then
            	echo "PRODUCTION DEPLOYMENT"
              echo $DOCKER_PWD | docker login -u $DOCKER_HUB_USER_ID --password-stdin;
              docker tag $DOCKER_ORG/<< parameters.service_name >>:latest $DOCKER_ORG/<< parameters.service_name >>:$CIRCLE_SHA1
              docker push << parameters.docker_org >>/<< parameters.service_name >>:$CIRCLE_SHA1
              docker push << parameters.docker_org >>/<< parameters.service_name >>:latest
            else
            	echo "DEVELOPMENT DEPLOYMENT"
              echo $DEV_DOCKER_HUB_PWD | docker login -u $DEV_DOCKER_HUB_USER_ID --password-stdin
              docker tag $DEV_DOCKER_ORG/<< parameters.service_name >>:latest $DEV_DOCKER_ORG/<< parameters.service_name >>:$CIRCLE_SHA1
              docker push $DEV_DOCKER_ORG/<< parameters.service_name >>:$CIRCLE_SHA1
              docker push $DEV_DOCKER_ORG/<< parameters.service_name >>:latest
            fi
      - run:
          name: Deploy service over SSH
          command: |
            export DOCKER_DEPLOY=$([ "${CIRCLE_PROJECT_USERNAME}" = "singnet" ] && echo "true" || echo "false")
            if [ "$DOCKER_DEPLOY" = "true" ]; then
              echo "PRODUCTION DEPLOYMENT"
              ssh -o "StrictHostKeyChecking no" ${SSH_USER_PROD}@${SSH_HOST_PROD} \<<-EOF
            docker login -u $DOCKER_HUB_USER_ID -p $DOCKER_HUB_PWD
            docker pull << parameters.docker_org >>/<< parameters.service_name >>:latest
            docker rename << parameters.service_name >> << parameters.container_name_backup >> || true
            docker stop << parameters.container_name_backup >> || true
            docker run --runtime=nvidia --name << parameters.service_name >> --restart unless-stopped -p << parameters.snetd_port >>:<< parameters.snetd_port >> \
            -v /home/ubuntu/nlp-services/<< parameters.service_name >>/config:/config \
            -v /home/ubuntu/nlp-services/<< parameters.service_name >>/etcd:/etcd \
            -v /home/ubuntu/nlp-services/<< parameters.service_name >>/storage-data-dir-1.etcd:/storage-data-dir-1.etcd \
            -di << parameters.docker_org >>/<< parameters.service_name >>:latest
            docker rm << parameters.container_name_backup >> || true
            EOF
            else
              echo "DEVELOPMENT DEPLOYMENT"
              ssh -o "StrictHostKeyChecking no" ${SSH_USER_DEV}@${SSH_HOST_DEV} \<<-EOF
            docker login -u $DEV_DOCKER_HUB_USER_ID -p $DEV_DOCKER_HUB_PWD
            docker pull $DEV_DOCKER_ORG/<< parameters.service_name >>:latest
            docker rename << parameters.service_name >> << parameters.container_name_backup >> || true
            docker stop << parameters.container_name_backup >> || true
            docker run --runtime=nvidia --name << parameters.service_name >> --restart unless-stopped -p << parameters.snetd_port >>:<< parameters.snetd_port >> \
            -v /home/ubuntu/nlp-services/<< parameters.service_name >>/config:/config \
            -v /home/ubuntu/nlp-services/<< parameters.service_name >>/etcd:/etcd \
            -v /home/ubuntu/nlp-services/<< parameters.service_name >>/storage-data-dir-1.etcd:/storage-data-dir-1.etcd \
            -di $DEV_DOCKER_ORG/<< parameters.service_name >>:latest
            docker rm << parameters.container_name_backup >> || true
            ls -la
            EOF
            fi

version: 2.1
executors:
  singnet-executor:
    machine:
      image: circleci/classic:201808-01
    working_directory: ~/singnet

jobs:
  build-translation-container:
    executor: singnet-executor
    environment:
      SERVICE_NAME: translation
    steps:
      - checkout
      - build_and_test_service:
          service_name: translation
          org: singnet
          docker_org: singularitynet
          run_test: false
          unit_test_command: "'cd tests; pytest'"
      - persist_to_workspace:
          root: ~/singnet
          paths: translation
  deploy-translation:
    executor: singnet-executor
    environment:
      SERVICE_NAME: translation
    steps:
      - attach_workspace:
          at: ~/singnet
      - deploy_service:
          service_name: translation
          org: singnet
          docker_org: singularitynet
          snetd_port: 6208
          container_name_backup: translation-temp-bk

  build-summarization-container:
    executor: singnet-executor
    environment:
      SERVICE_NAME: text-summarization
    steps:
      - checkout
      - build_and_test_service:
          service_name: text-summarization
          org: singnet
          docker_org: singularitynet
          run_test: false
          unit_test_command: "'cd tests; pytest'"
      - persist_to_workspace:
          root: ~/singnet
          paths: text-summarization

  deploy-summarization:
    executor: singnet-executor
    environment:
      SERVICE_NAME: text-summarization
    steps:
      - attach_workspace:
          at: ~/singnet
      - deploy_service:
          service_name: text-summarization
          org: singnet
          docker_org: singularitynet
          snetd_port: 6207
          container_name_backup: text-summarization-temp-bk

  build-sentiment-analysis-container:
    executor: singnet-executor
    environment:
      SERVICE_NAME: sentiment-analysis
    steps:
      - checkout
      - build_and_test_service:
          service_name: sentiment-analysis
          org: singnet
          docker_org: singularitynet
          unit_test_command: "'cd tests; pytest'"
      - persist_to_workspace:
          root: ~/singnet
          paths: sentiment-analysis

  deploy-sentiment-analysis:
    executor: singnet-executor
    environment:
      SERVICE_NAME: sentiment-analysis
    steps:
      - attach_workspace:
          at: ~/singnet
      - deploy_service:
          service_name: sentiment-analysis
          org: singnet
          docker_org: singularitynet
          snetd_port: 7010
          container_name_backup: sentiment-analysis-temp-bk

  build-named-entity-recognition-container:
    executor: singnet-executor
    environment:
      SERVICE_NAME: named-entity-recognition
      CACHE_MODELS_PATH: named-entity-recognition/caches/models
    steps:
      - checkout
      - build_and_test_service:
          service_name: named-entity-recognition
          org: singnet
          docker_org: singularitynet
          unit_test_command: "'cd tests; pytest'"
      - persist_to_workspace:
          root: ~/singnet
          paths: named-entity-recognition

  deploy-named-entity-recognition:
    executor: singnet-executor
    environment:
      SERVICE_NAME: named-entity-recognition
    steps:
      - attach_workspace:
          at: ~/singnet
      - deploy_service:
          service_name: named-entity-recognition
          org: singnet
          docker_org: singularitynet
          snetd_port: 7012
          container_name_backup: named-entity-recognition-temp-bk

#  deploy-cntk-language-understanding:
#    docker:
#      - image: circleci/python:3.6.6-node
#    working_directory: ~/singnet
#    environment:
#      SERVICE_FOLDER: cntk-language-understanding
#      SERVICE_RUN_COMMAND: bash -c "source '/cntk/activate-cntk';git pull;python3 run_language_understanding_service.py"
#      SERVICE_TEST_COMMAND: bash -c "source '/cntk/activate-cntk';python3 test_language_understanding_service.py auto"
#      SNETD_PORT: 7075
#    steps:
#      - build_and_deploy_cmd:
#          docker_image_name: cntk-language-understanding
#          docker_container_name: ARTUR_CNTK_LANGUAGE_UNDERSTANDING
#          docker_mount_volumes: true
#          docker_mount_src: /home/admin/storage/LanguageUnderstanding/CNTK/Output
#          docker_mount_dest: /opt/singnet/output
#  deploy-opennmt-romance-translator:
#    docker:
#      - image: circleci/python:3.6.6-node
#    working_directory: ~/singnet
#    environment:
#      SERVICE_FOLDER: opennmt-romance-translator
#      SERVICE_RUN_COMMAND: bash -c "git pull;python3 run_romance_translator_service.py"
#      SERVICE_TEST_COMMAND: bash -c "python3 test_romance_translator_service.py auto"
#      SNETD_PORT: 7076
#    steps:
#      - build_and_deploy_cmd:
#          docker_image_name: opennmt-romance-translator
#          docker_container_name: ARTUR_OPENNMT_ROMANCE_TRANSLATOR

workflows:
  version: 2.1
  build-and-maybe-deploy:
    jobs:
      - build-translation-container
      - deploy-translation:
          requires:
            - build-translation-container
          filters:
            branches:
              only: master
      - build-summarization-container
      - deploy-summarization:
          requires:
            - build-summarization-container
          filters:
            branches:
              only: master
      - build-sentiment-analysis-container
      - deploy-sentiment-analysis:
          requires:
            - build-sentiment-analysis-container
          filters:
            branches:
              only: master
      - build-named-entity-recognition-container
      - deploy-named-entity-recognition:
          requires:
            - build-named-entity-recognition-container
          filters:
            branches:
              only: master
#  build-and-deploy-cntk:
#    jobs:
#      - deploy-cntk-language-understanding
#  build-and-deploy-opennmt:
#    jobs:
#      - deploy-opennmt-romance-translator