commands:
  build_and_test_service:
    description: "Build and test services"
    parameters:
      service_name:
        type: string
        default: ""
      org:
        type: string
        default: ""
      docker_org:
        type: string
        default: ""
      run_test:
        type: boolean
        default: true
      use_cache:
        type: boolean
        default: true
      service_start_command:
        type: string
        default: ""
      daemon_config_path:
        type: string
        default: ""
      daemon_config_file:
        type: string
        default: ""
      service_test_command:
        type: string
        default: ""
    steps:
      - run:
          name: Container setup
          command: |
            pyenv global 3.6.5
            pip install --upgrade pip
            pip install requests tqdm
            sudo mkdir -p << parameters.service_name >>/caches/models
            sudo chown -R circleci:circleci << parameters.service_name >>
      - restore_cache:
          keys:
            - service-cache-v1-{{ .Branch }}-{{ checksum "<< parameters.service_name >>/Dockerfile" }}
            - service-cache-v1-{{ .Branch }}-
            - service-cache-v1-
      - run:
          name: Fetch models
          command: |
            cd << parameters.service_name >>
            python ../fetch_models.py
      - when:
          condition: << parameters.use_cache >>
          steps:
            - run:
                name: Load docker image cache.
                command: |
                  docker load -i << parameters.service_name >>/caches/docker_image.tar || true
      - run:
          name: Build application Docker image
          command: |
            echo Github Account: ${CIRCLE_PROJECT_USERNAME}
            cd << parameters.service_name >>
            export DEPLOY_ENVIRONMENT=$([ "${CIRCLE_PROJECT_USERNAME}" = "singnet" ] && echo "true" || echo "false")
            if [ "$DEPLOY_ENVIRONMENT" = "true" ]; then
            	echo "PRODUCTION DEPLOYMENT"
            	docker build --cache-from=<< parameters.docker_org >>/<< parameters.service_name >>:latest \
            	  -t << parameters.docker_org >>/<< parameters.service_name >>:latest \
            	  --build-arg GITHUB_ACCOUNT=${CIRCLE_PROJECT_USERNAME} \
                  --build-arg GITHUB_BRANCH=${CIRCLE_BRANCH} \
            	  --build-arg SNETD_VERSION=${SNETD_VERSION} .
            else
            	echo "DEVELOPMENT DEPLOYMENT"
            	docker build --cache-from=$DEV_DOCKER_ORG/<< parameters.service_name >>:latest \
            	  -t $DEV_DOCKER_ORG/<< parameters.service_name >>:latest \
            	  --build-arg GITHUB_ACCOUNT=${CIRCLE_PROJECT_USERNAME} \
                  --build-arg GITHUB_BRANCH=${CIRCLE_BRANCH} \
            	  --build-arg SNETD_VERSION=${SNETD_VERSION} .
            fi
      - when:
          condition: << parameters.run_test >>
          steps:
            - run:
                name: Run tests
                command: |
                  export DEPLOY_ENVIRONMENT=$([ "${CIRCLE_PROJECT_USERNAME}" = "singnet" ] && echo "true" || echo "false")
                  if [ "$DEPLOY_ENVIRONMENT" = "true" ]; then
                      echo "PRODUCTION DEPLOYMENT"
                      docker run \
                        --name << parameters.service_name >> \
                        -idt << parameters.docker_org >>/<< parameters.service_name >>:latest \
                        << parameters.service_start_command >> << parameters.daemon_config_path >><< parameters.daemon_config_file >>
                  else
                  	echo "DEVELOPMENT DEPLOYMENT"
                      docker run \
                        --name << parameters.service_name >> \
                        -idt $DEV_DOCKER_ORG/<< parameters.service_name >>:latest \
                        << parameters.service_start_command >> << parameters.daemon_config_path >><< parameters.daemon_config_file >>
                  fi
                  docker exec \
                    -it << parameters.service_name >> \
                    << parameters.service_test_command >>
      - run:
          name: Save docker image
          no_output_timeout: 40m
          command: |
            pwd
            mkdir -p << parameters.service_name >>/caches
            export DEPLOY_ENVIRONMENT=$([ "${CIRCLE_PROJECT_USERNAME}" = "singnet" ] && echo "true" || echo "false")
            if [ "$DEPLOY_ENVIRONMENT" = "true" ]; then
                echo "PRODUCTION DEPLOYMENT"
                docker save -o << parameters.service_name >>/caches/docker_image.tar << parameters.docker_org >>/<< parameters.service_name >>:latest
                ls -sh << parameters.service_name >>/caches
            else
            	echo "DEVELOPMENT DEPLOYMENT"
                docker save -o << parameters.service_name >>/caches/docker_image.tar $DEV_DOCKER_ORG/<< parameters.service_name >>:latest
                ls -sh << parameters.service_name >>/caches
            fi
      - save_cache:
          key: service-cache-v1-{{ .Branch }}-{{ checksum "<< parameters.service_name >>/Dockerfile" }}
          paths:
            - << parameters.service_name >>/caches/docker_image.tar
            - << parameters.service_name >>/caches/models

  deploy_service:
    description: "Deploy services"
    parameters:
      network:
        type: string
        default: ""
      domain:
        type: string
        default: ""
      host_address:
        type: string
        default: ""
      ssh_user_env_var:
        type: string
        default: ""
      ssh_host_env_var:
        type: string
        default: ""
      ssl_cert_path_env_var:
        type: string
        default: ""
      ssl_key_path_env_var:
        type: string
        default: ""
      start_with_ssl:
        type: boolean
        default: false
      service_name:
        type: string
        default: ""
      org:
        type: string
        default: ""
      docker_org:
        type: string
        default: ""
      container_name:
        type: string
        default: ""
      container_name_backup:
        type: string
        default: ""
      snetd_ports:
        type: string
        default: ""
      service_start_command:
        type: string
        default: ""
      daemon_config_path:
        type: string
        default: ""
      daemon_config_file:
        type: string
        default: ""
    steps:
      - run:
          name: Deploying network environment
          command: |
            echo Deploying on << parameters.network >>
      - run:
          name: Load docker image cache
          command: |
            docker load -i << parameters.service_name >>/caches/docker_image.tar
      - run:
          name: Deploy docker image
          command: |
            export DEPLOY_ENVIRONMENT=$([ "${CIRCLE_PROJECT_USERNAME}" = "singnet" ] && echo "true" || echo "false")
            if [ "$DEPLOY_ENVIRONMENT" = "true" ]; then
            	echo "PRODUCTION DEPLOYMENT"
              echo $DOCKER_HUB_PWD | docker login -u $DOCKER_HUB_USER_ID --password-stdin
              docker tag $DOCKER_ORG/<< parameters.service_name >>:latest $DOCKER_ORG/<< parameters.service_name >>:$CIRCLE_SHA1
              docker push << parameters.docker_org >>/<< parameters.service_name >>:$CIRCLE_SHA1
              docker push << parameters.docker_org >>/<< parameters.service_name >>:latest
            else
            	echo "DEVELOPMENT DEPLOYMENT"
              echo $DEV_DOCKER_HUB_PWD | docker login -u $DEV_DOCKER_HUB_USER_ID --password-stdin
              docker tag $DEV_DOCKER_ORG/<< parameters.service_name >>:latest $DEV_DOCKER_ORG/<< parameters.service_name >>:$CIRCLE_SHA1
              docker push $DEV_DOCKER_ORG/<< parameters.service_name >>:$CIRCLE_SHA1
              docker push $DEV_DOCKER_ORG/<< parameters.service_name >>:latest
            fi
      - run:
          name: Deploy service over SSH
          command: |
            export DEPLOY_ENVIRONMENT=$([ "${CIRCLE_PROJECT_USERNAME}" = "singnet" ] && echo "true" || echo "false")
            if [ "$DEPLOY_ENVIRONMENT" = "true" ]; then
              echo "PRODUCTION DEPLOYMENT"
              ssh -o "StrictHostKeyChecking no" ${<< parameters.ssh_user_env_var >>}@${<< parameters.ssh_host_env_var >>} \<<-EOF
            echo $DOCKER_HUB_PWD | docker login -u $DOCKER_HUB_USER_ID --password-stdin
            docker pull << parameters.docker_org >>/<< parameters.service_name >>:latest
            docker stop << parameters.container_name >> || true
            docker rename << parameters.container_name >> << parameters.container_name_backup >> || true
            docker run --runtime=nvidia --name << parameters.container_name >> --restart unless-stopped << parameters.snetd_ports >> \
            -v ${CERTS_FOLDER}:${CERTS_FOLDER} \
            -v ~/${CIRCLE_PROJECT_REPONAME}/<< parameters.service_name >>/etcd:/<< parameters.service_name >>/etcd \
            -v ~/${CIRCLE_PROJECT_REPONAME}/<< parameters.service_name >>/storage-data-dir-1.etcd:/<< parameters.service_name >>/storage-data-dir-1.etcd \
            -di << parameters.docker_org >>/<< parameters.service_name >>:latest << parameters.service_start_command >> << parameters.daemon_config_path >><< parameters.daemon_config_file >>
            if [[ << parameters.start_with_ssl >> = true ]]; then
              echo Starting with ssl
              docker exec -w /<< parameters.service_name >>/<< parameters.daemon_config_path >> << parameters.container_name >> sed -i '\$i \,\"ssl_cert\": \"${SSL_PATH}/<<parameters.domain>>/fullchain.pem\", \"ssl_key\": \"${SSL_PATH}/<<parameters.domain>>/privkey.pem\"' << parameters.daemon_config_file >>
              docker restart << parameters.container_name >>
            fi
            docker rm << parameters.container_name_backup >> || true
            EOF
            else
              echo "DEVELOPMENT DEPLOYMENT"
              ssh -o "StrictHostKeyChecking no" ${<< parameters.ssh_user_env_var >>}@${<< parameters.ssh_host_env_var >>} \<<-EOF
            echo $DEV_DOCKER_HUB_PWD | docker login -u $DEV_DOCKER_HUB_USER_ID --password-stdin
            docker pull $DEV_DOCKER_ORG/<< parameters.service_name >>:latest
            docker stop << parameters.container_name >> || true
            docker rename << parameters.container_name >> << parameters.container_name_backup >> || true
            docker run --runtime=nvidia --name << parameters.container_name >> --restart unless-stopped << parameters.snetd_ports >> \
            -v ${CERTS_FOLDER}:${CERTS_FOLDER} \
            -v ~/${CIRCLE_PROJECT_REPONAME}/<< parameters.service_name >>/etcd:/<< parameters.service_name >>/etcd \
            -v ~/${CIRCLE_PROJECT_REPONAME}/<< parameters.service_name >>/storage-data-dir-1.etcd:/<< parameters.service_name >>/storage-data-dir-1.etcd \
            -di $DEV_DOCKER_ORG/<< parameters.service_name >>:latest << parameters.service_start_command >> << parameters.daemon_config_path >><< parameters.daemon_config_file >>
            if [[ << parameters.start_with_ssl >> = true ]]; then
              echo Starting with ssl
              docker exec -w /<< parameters.service_name >>/<< parameters.daemon_config_path >> << parameters.container_name >> sed -i '\$i \,\"ssl_cert\": \"${SSL_PATH}/<<parameters.domain>>/fullchain.pem\", \"ssl_key\": \"${SSL_PATH}/<<parameters.domain>>/privkey.pem\"' << parameters.daemon_config_file >>
              docker restart << parameters.container_name >>
            fi
            docker rm << parameters.container_name_backup >> || true
            EOF
            fi

version: 2.1
executors:
  singnet-executor:
    machine:
      image: circleci/classic:201808-01
    working_directory: ~/singnet

jobs:
  build-translation-container:
    executor: singnet-executor
    environment:
      SERVICE_NAME: translation
    steps:
      - checkout
      - build_and_test_service:
          service_name: translation
          org: singnet
          docker_org: singularitynet
          run_test: false
      - persist_to_workspace:
          root: ~/singnet
          paths: translation
  deploy-translation:
    executor: singnet-executor
    environment:
      SERVICE_NAME: translation
    steps:
      - attach_workspace:
          at: ~/singnet
      - when:
          condition: true
          steps:
            - deploy_service:
                network: mainnet
                domain: TRANSLATION_DOMAIN
                ssh_user_env_var: TRANSLATION_SSH_USER
                ssh_host_env_var: TRANSLATION_DOMAIN
                org: singnet
                docker_org: singularitynet
                container_name: translation-mainnet
                service_name: translation
                start_with_ssl: true
                snetd_ports: -p 6408:6408
                service_start_command: python3.6 run_service.py --daemon-config-path
                daemon_config_path:
                daemon_config_file: snetd.mainnet.config.json
                container_name_backup: translation-mainnet-temp-bk
      - when:
          condition: true
          steps:
            - deploy_service:
                network: testnet
                domain: TRANSLATION_DOMAIN
                ssh_user_env_var: TRANSLATION_SSH_USER
                ssh_host_env_var: TRANSLATION_DOMAIN
                org: singnet
                docker_org: singularitynet
                container_name: translation-testnet
                service_name: translation
                start_with_ssl: true
                snetd_ports: -p 6308:6308
                service_start_command: python3 run_service.py --daemon-config-path
                daemon_config_path:
                daemon_config_file: snetd.testnet.config.json
                container_name_backup: translation-testnet-temp-bk

  build-summarization-container:
    executor: singnet-executor
    environment:
      SERVICE_NAME: text-summarization
    steps:
      - checkout
      - build_and_test_service:
          service_name: text-summarization
          org: singnet
          docker_org: singularitynet
          run_test: false
      - persist_to_workspace:
          root: ~/singnet
          paths: text-summarization

  deploy-summarization:
    executor: singnet-executor
    environment:
      SERVICE_NAME: text-summarization
    steps:
      - attach_workspace:
          at: ~/singnet
      - when:
          condition: true
          steps:
            - deploy_service:
                network: mainnet
                domain: TEXT_SUMMARIZATION_DOMAIN
                ssh_user_env_var: TEXT_SUMMARIZATION_SSH_USER
                ssh_host_env_var: TEXT_SUMMARIZATION_DOMAIN
                org: singnet
                docker_org: singularitynet
                container_name: text-summarization-mainnet
                service_name: text-summarization
                start_with_ssl: true
                snetd_ports: -p 6407:6407
                service_start_command: python3.6 run_service.py --daemon-config-path
                daemon_config_path:
                daemon_config_file: snetd.mainnet.config.json
                container_name_backup: text-summarization-mainnet-temp-bk
      - when:
          condition: true
          steps:
            - deploy_service:
                network: testnet
                domain: TEXT_SUMMARIZATION_DOMAIN
                ssh_user_env_var: TEXT_SUMMARIZATION_SSH_USER
                ssh_host_env_var: TEXT_SUMMARIZATION_DOMAIN
                org: singnet
                docker_org: singularitynet
                container_name: text-summarization-testnet
                service_name: text-summarization
                start_with_ssl: true
                snetd_ports: -p 6307:6307
                service_start_command: python3.6 run_service.py --daemon-config-path
                daemon_config_path:
                daemon_config_file: snetd.testnet.config.json
                container_name_backup: text-summarization-testnet-temp-bk

  build-sentiment-analysis-container:
    executor: singnet-executor
    environment:
      SERVICE_NAME: sentiment-analysis
    steps:
      - checkout
      - build_and_test_service:
          service_name: sentiment-analysis
          org: singnet
          docker_org: singularitynet
          service_test_command: bash -c 'cd tests;pytest'
      - persist_to_workspace:
          root: ~/singnet
          paths: sentiment-analysis

  deploy-sentiment-analysis:
    executor: singnet-executor
    environment:
      SERVICE_NAME: sentiment-analysis
    steps:
      - attach_workspace:
          at: ~/singnet
      - when:
          condition: true
          steps:
            - deploy_service:
                network: mainnet
                domain: SENTIMENT_ANALYSIS_DOMAIN
                ssh_user_env_var: SENTIMENT_ANALYSIS_SSH_USER
                ssh_host_env_var: SENTIMENT_ANALYSIS_DOMAIN
                org: singnet
                docker_org: singularitynet
                container_name: sentiment-analysis-mainnet
                service_name: sentiment-analysis
                start_with_ssl: true
                snetd_ports: -p 7010:7010
                service_start_command: python3 run_service.py --daemon-config-path
                daemon_config_path: config/
                daemon_config_file: snetd.mainnet.config.json
                container_name_backup: sentiment-analysis-mainnet-temp-bk
      - when:
          condition: true
          steps:
            - deploy_service:
                network: testnet
                domain: SENTIMENT_ANALYSIS_DOMAIN
                ssh_user_env_var: SENTIMENT_ANALYSIS_SSH_USER
                ssh_host_env_var: SENTIMENT_ANALYSIS_DOMAIN
                org: singnet
                docker_org: singularitynet
                container_name: sentiment-analysis-testnet
                service_name: sentiment-analysis
                start_with_ssl: true
                snetd_ports: -p 7013:7013
                service_start_command: python3 run_service.py --daemon-config-path
                daemon_config_path: config/
                daemon_config_file: snetd.testnet.config.json
                container_name_backup: sentiment-analysis-testnet-temp-bk

  build-named-entity-recognition-container:
    executor: singnet-executor
    environment:
      SERVICE_NAME: named-entity-recognition
      CACHE_MODELS_PATH: named-entity-recognition/caches/models
    steps:
      - checkout
      - build_and_test_service:
          service_name: named-entity-recognition
          org: singnet
          docker_org: singularitynet
          service_test_command: bash -c 'cd tests;pytest'
      - persist_to_workspace:
          root: ~/singnet
          paths: named-entity-recognition

  deploy-named-entity-recognition:
    executor: singnet-executor
    environment:
      SERVICE_NAME: named-entity-recognition
    steps:
      - attach_workspace:
          at: ~/singnet
      - when:
          condition: true
          steps:
            - deploy_service:
                network: mainnet
                domain: NAMED_ENTITY_RECON_DOMAIN
                ssh_user_env_var: NAMED_ENTITY_RECON_SSH_USER
                ssh_host_env_var: NAMED_ENTITY_RECON_DOMAIN
                org: singnet
                docker_org: singularitynet
                container_name: named-entity-recognition-mainnet
                service_name: named-entity-recognition
                start_with_ssl: true
                snetd_ports: -p 7012:7012
                service_start_command: python3 run_service.py --daemon-config-path
                daemon_config_path: config/
                daemon_config_file: snetd.mainnet.config.json
                container_name_backup: named-entity-recognition-mainnet-temp-bk
      - when:
          condition: true
          steps:
            - deploy_service:
                network: testnet
                domain: NAMED_ENTITY_RECON_DOMAIN
                ssh_user_env_var: NAMED_ENTITY_RECON_SSH_USER
                ssh_host_env_var: NAMED_ENTITY_RECON_DOMAIN
                org: singnet
                docker_org: singularitynet
                container_name: named-entity-recognition-testnet
                service_name: named-entity-recognition
                start_with_ssl: true
                snetd_ports: -p 7014:7014
                service_start_command: python3 run_service.py --daemon-config-path
                daemon_config_path: config/
                daemon_config_file: snetd.testnet.config.json
                container_name_backup: named-entity-recognition-testnet-temp-bk

  build-cntk-language-understanding-container:
    executor: singnet-executor
    environment:
      SERVICE_NAME: cntk-language-understanding
      CACHE_MODELS_PATH: cntk-language-understanding/caches/models
    steps:
      - checkout
      - build_and_test_service:
          service_name: cntk-language-understanding
          org: singnet
          docker_org: singularitynet
          service_start_command: /root/anaconda3/envs/cntk-py35/bin/python run_service.py --daemon-config-path
          daemon_config_path: config/
          daemon_config_file: snetd.testnet.config.json
          service_test_command: bash -c 'sleep 10;/root/anaconda3/envs/cntk-py35/bin/python test_service.py auto'
      - persist_to_workspace:
          root: ~/singnet
          paths: cntk-language-understanding

  deploy-cntk-language-understanding:
    executor: singnet-executor
    environment:
      SERVICE_NAME: cntk-language-understanding
    steps:
      - attach_workspace:
          at: ~/singnet
      - when:
          condition: true
          steps:
            - deploy_service:
                network: mainnet
                domain: CNTK_LANGUAGE_DOMAIN
                ssh_user_env_var: CNTK_LANGUAGE_SSH_USER
                ssh_host_env_var: CNTK_LANGUAGE_DOMAIN
                org: singnet
                docker_org: singularitynet
                container_name: cntk-language-understanding-mainnet
                service_name: cntk-language-understanding
                start_with_ssl: true
                snetd_ports: -p 7048:7048
                service_start_command: /root/anaconda3/envs/cntk-py35/bin/python run_service.py --daemon-config-path
                daemon_config_path: config/
                daemon_config_file: snetd.mainnet.config.json
                container_name_backup: cntk-language-understanding-mainnet-temp-bk
      - when:
          condition: true
          steps:
            - deploy_service:
                network: testnet
                domain: CNTK_LANGUAGE_DOMAIN
                ssh_user_env_var: CNTK_LANGUAGE_SSH_USER
                ssh_host_env_var: CNTK_LANGUAGE_DOMAIN
                org: singnet
                docker_org: singularitynet
                container_name: cntk-language-understanding-testnet
                service_name: cntk-language-understanding
                start_with_ssl: true
                snetd_ports: -p 7068:7068
                service_start_command: /root/anaconda3/envs/cntk-py35/bin/python run_service.py --daemon-config-path
                daemon_config_path: config/
                daemon_config_file: snetd.testnet.config.json
                container_name_backup: cntk-language-understanding-testnet-temp-bk

  build-opennmt-romance-translator-container:
    executor: singnet-executor
    environment:
      SERVICE_NAME: opennmt-romance-translator
      CACHE_MODELS_PATH: opennmt-romance-translator/caches/models
    steps:
      - checkout
      - build_and_test_service:
          service_name: opennmt-romance-translator
          org: singnet
          docker_org: singularitynet
          run_test: false
      - persist_to_workspace:
          root: ~/singnet
          paths: opennmt-romance-translator

  deploy-opennmt-romance-translator:
    executor: singnet-executor
    environment:
      SERVICE_NAME: opennmt-romance-translator
    steps:
      - attach_workspace:
          at: ~/singnet
      - when:
          condition: true
          steps:
            - deploy_service:
                network: mainnet
                domain: OPENNMT_ROMANCE_DOMAIN
                ssh_user_env_var: OPENNMT_ROMANCE_SSH_USER
                ssh_host_env_var: OPENNMT_ROMANCE_DOMAIN
                org: singnet
                docker_org: singularitynet
                container_name: opennmt-romance-translator-mainnet
                service_name: opennmt-romance-translator
                start_with_ssl: true
                snetd_ports: -p 7049:7049
                service_start_command: python3 run_service.py --daemon-config-path
                daemon_config_path: config/
                daemon_config_file: snetd.mainnet.config.json
                container_name_backup: opennmt-romance-translator-mainnet-temp-bk
      - when:
          condition: true
          steps:
            - deploy_service:
                network: testnet
                domain: OPENNMT_ROMANCE_DOMAIN
                ssh_user_env_var: OPENNMT_ROMANCE_SSH_USER
                ssh_host_env_var: OPENNMT_ROMANCE_DOMAIN
                org: singnet
                docker_org: singularitynet
                container_name: opennmt-romance-translator-testnet
                service_name: opennmt-romance-translator
                start_with_ssl: true
                snetd_ports: -p 7069:7069
                service_start_command: python3 run_service.py --daemon-config-path
                daemon_config_path: config/
                daemon_config_file: snetd.testnet.config.json
                container_name_backup: opennmt-romance-translator-testnet-temp-bk

workflows:
  version: 2.1
  build-and-maybe-deploy:
    jobs:
      - build-translation-container
      - deploy-translation:
          requires:
            - build-translation-container
          filters:
            branches:
              only: master
      - build-summarization-container
      - deploy-summarization:
          requires:
            - build-summarization-container
          filters:
            branches:
              only: master
      - build-sentiment-analysis-container
      - deploy-sentiment-analysis:
          requires:
            - build-sentiment-analysis-container
          filters:
            branches:
              only: master
      - build-named-entity-recognition-container
      - deploy-named-entity-recognition:
          requires:
            - build-named-entity-recognition-container
          filters:
            branches:
              only: master
      - build-cntk-language-understanding-container
      - deploy-cntk-language-understanding:
          requires:
            - build-cntk-language-understanding-container
          filters:
            branches:
              only: master
      - build-opennmt-romance-translator-container
      - deploy-opennmt-romance-translator:
          requires:
            - build-opennmt-romance-translator-container
          filters:
            branches:
              only: master